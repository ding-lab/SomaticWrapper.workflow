#!/bin/bash

# author: Matthew Wyczalkowski m.wyczalkowski@wustl.edu

# Generate a BamMap file which can be used for Germline and Somatic wrapper processing
# File generated is same format as that from importGDC

# Usage: create_bam_map.sh [options] sample_name case disease exp_strategy samp_type path data_format reference
#
# sample_name - any unique name associated with this file, e.g., "C3L-00004.WGS.T".  This is the primary identifier of this file
# case - An identifier of this individual (e.g., C3L-00004)
# disease - Disease code, e.g. BRCA
# exp_strategy - Experimental Strategy, generally "WGS", "WXS", or "RNA-Seq"
# samp_type - Sample Type, typically one of "normal" or "tumor"
# path - complete path to data file (BAM or FASTQ).  Must exist
# data_format - one of "BAM" or "FASTQ"
# reference - Reference identifier.  If FASTQ, use "NA"
#
# Output written to STDOUT.  Format is TSV with the following columns:
#     1  SampleName
#     2  Case
#     3  Disease
#     4  ExpStrategy
#     5  SampType
#     6  DataPath
#     7  FileSize    - calculated
#     8  DataFormat  
#     9  Reference
#    10  UUID        - this is relevant only for GDC data, will be NA
# where SampleName is a generated unique name for this sample

# options
# -H: Print header

# The related file make_bam_map.sh (https://github.com/ding-lab/importGDC/blob/master/batch.import/make_bam_map.sh)
# requires an "SR" file, which is in turn generated by https://github.com/ding-lab/discover.CPTAC3.b1


# Default values
SR_FILE="config/SR.dat"
DATA_DIR="./data"
REF="hg19"

# http://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":Hw" opt; do
  case $opt in
    H) 
      HEADER=1
      ;;
    w) 
      NOWARN=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

#sample_name case disease exp_strategy samp_type path data_format reference

if [ "$#" != 8 ]; then
    >&2 echo Error: Wrong number of arguments
    >&2 echo Usage: create_bam_map.sh \[options\] sample_name case disease exp_strategy samp_type path data_format reference
    exit
fi

if [ $HEADER ]; then
    printf "# SampleName\tCase\tDisease\tExpStrategy\tSampType\tDataPath\tFileSize\tDataFormat\tReference\tUUID\n"
fi

SN=$1
CASE=$2
DIS=$3
ES=$4
ST=$5
FN=$6
DF=$7
REF=$8

UUID="NA"

if [ ! -e $FN ]; then
    if [ -z $NOWARN ]; then
        >&2 echo ERROR: Data file does not exist: $FN
    fi
    FS=0
else
# stat has different usage on Mac and Linux.  Try both, ignore errors
# stat -f%z - works on Mac
# stat -c%s - works on linux
    FS=$(stat -f%z $FN 2>/dev/null || stat -c%s $FN 2>/dev/null)
fi

if [ $DF == "BAM" ]; then
    # If BAM file, test to make sure that .bai file generated
    BAI="$FN.bai"
    if [ ! -e $BAI ] && [ -z $NOWARN ]; then
        >&2 echo WARNING: Index file does not exist: $BAI
    fi
fi


printf "$SN\t$CASE\t$DIS\t$ES\t$ST\t$FN\t$FS\t$DF\t$REF\t$UUID\n"
